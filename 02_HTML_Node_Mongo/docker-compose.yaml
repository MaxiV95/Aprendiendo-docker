version: '3'
services:
  mongodb:
    image: mongo # Utiliza la imagen de MongoDB disponible en Docker Hub
    ports:
      - 27017:27017 # Mapea el puerto 27017 del host al puerto 27017 del contenedor para acceder a MongoDB
    environment: # Configura las variables de entorno para MongoDB
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes: # Monta un volumen para almacenar los datos de MongoDB
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express # Utiliza la imagen de Mongo Express disponible en Docker Hub
    restart: always # Reinicia siempre el contenedor en caso de fallos
    ports:
      - 8080:8081 # Mapea el puerto 8081 del host al puerto 8081 del contenedor para acceder a Mongo Express
    environment: # Configura las variables de entorno para Mongo Express
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb # Especifica el servidor de MongoDB al que se conectará Mongo Express

  my-app:
    build: ./  # Especifica la ruta a la carpeta que contiene tu Dockerfile
    image: my-node-app:0.0.1
    ports:
      - 3000:3000  # Puedes mapear el puerto de tu aplicación como desees
    depends_on:
      - mongodb  # Indica que este servicio depende del servicio 'mongodb'

volumes: # Define un volumen llamado "mongo-data" para almacenar los datos de MongoDB
  mongo-data:
    driver: local # Utiliza el controlador de volumen local por defecto

# docker-compose -p my-app -f docker-compose.yaml up --detach